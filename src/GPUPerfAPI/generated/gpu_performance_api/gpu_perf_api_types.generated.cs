// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
//
// This file was automatically generated by GPUPerfAPI.CodeGen - DO NOT EDIT

using System;
namespace GPUPerfAPI
{
    public static unsafe partial class GPUPerfAPI
    {
        /// <summary>
        /// @brief Status enumerations.
        /// </summary>
        public enum GpaStatus : int
        {
            kGpaStatusOk = unchecked((int)0),
            
            kGpaStatusResultNotReady = unchecked((int)1),
            
            kGpaStatusMax = unchecked((int)1),
            
            kGpaStatusErrorNullPointer = unchecked((int)-1),
            
            kGpaStatusErrorContextNotOpen = unchecked((int)-2),
            
            kGpaStatusErrorContextAlreadyOpen = unchecked((int)-3),
            
            kGpaStatusErrorIndexOutOfRange = unchecked((int)-4),
            
            kGpaStatusErrorCounterNotFound = unchecked((int)-5),
            
            kGpaStatusErrorAlreadyEnabled = unchecked((int)-6),
            
            kGpaStatusErrorNoCountersEnabled = unchecked((int)-7),
            
            kGpaStatusErrorNotEnabled = unchecked((int)-8),
            
            kGpaStatusErrorCommandListAlreadyEnded = unchecked((int)-9),
            
            kGpaStatusErrorCommandListAlreadyStarted = unchecked((int)-10),
            
            kGpaStatusErrorCommandListNotEnded = unchecked((int)-11),
            
            kGpaStatusErrorNotEnoughPasses = unchecked((int)-12),
            
            kGpaStatusErrorSampleNotStarted = unchecked((int)-13),
            
            kGpaStatusErrorSampleAlreadyStarted = unchecked((int)-14),
            
            kGpaStatusErrorSampleNotEnded = unchecked((int)-15),
            
            kGpaStatusErrorCannotChangeCountersWhenSampling = unchecked((int)-16),
            
            kGpaStatusErrorSessionNotFound = unchecked((int)-17),
            
            kGpaStatusErrorSampleNotFound = unchecked((int)-18),
            
            kGpaStatusErrorContextNotFound = unchecked((int)-19),
            
            kGpaStatusErrorCommandListNotFound = unchecked((int)-20),
            
            kGpaStatusErrorReadingSampleResult = unchecked((int)-21),
            
            kGpaStatusErrorVariableNumberOfSamplesInPasses = unchecked((int)-22),
            
            kGpaStatusErrorFailed = unchecked((int)-23),
            
            kGpaStatusErrorHardwareNotSupported = unchecked((int)-24),
            
            kGpaStatusErrorDriverNotSupported = unchecked((int)-25),
            
            kGpaStatusErrorApiNotSupported = unchecked((int)-26),
            
            kGpaStatusErrorInvalidParameter = unchecked((int)-27),
            
            kGpaStatusErrorLibLoadFailed = unchecked((int)-28),
            
            kGpaStatusErrorLibLoadMajorVersionMismatch = unchecked((int)-29),
            
            kGpaStatusErrorLibLoadMinorVersionMismatch = unchecked((int)-30),
            
            kGpaStatusErrorGpaNotInitialized = unchecked((int)-31),
            
            kGpaStatusErrorGpaAlreadyInitialized = unchecked((int)-32),
            
            kGpaStatusErrorSampleInSecondaryCommandList = unchecked((int)-33),
            
            kGpaStatusErrorIncompatibleSampleTypes = unchecked((int)-34),
            
            kGpaStatusErrorSessionAlreadyStarted = unchecked((int)-35),
            
            kGpaStatusErrorSessionNotStarted = unchecked((int)-36),
            
            kGpaStatusErrorSessionNotEnded = unchecked((int)-37),
            
            kGpaStatusErrorInvalidDataType = unchecked((int)-38),
            
            kGpaStatusErrorInvalidCounterEquation = unchecked((int)-39),
            
            kGpaStatusErrorTimeout = unchecked((int)-40),
            
            kGpaStatusErrorLibAlreadyLoaded = unchecked((int)-41),
            
            kGpaStatusErrorOtherSessionActive = unchecked((int)-42),
            
            kGpaStatusErrorException = unchecked((int)-43),
            
            kGpaStatusErrorInvalidCounterGroupData = unchecked((int)-44),
            
            kGpaStatusMin = unchecked((int)-44),
            
            /// <summary>
            /// Status codes used internally within GPUPerfAPI.
            /// </summary>
            kGpaStatusInternal = unchecked((int)256),
        }
        
        public const GPUPerfAPI.GpaStatus kGpaStatusOk = GpaStatus.kGpaStatusOk;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusResultNotReady = GpaStatus.kGpaStatusResultNotReady;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusMax = GpaStatus.kGpaStatusMax;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorNullPointer = GpaStatus.kGpaStatusErrorNullPointer;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorContextNotOpen = GpaStatus.kGpaStatusErrorContextNotOpen;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorContextAlreadyOpen = GpaStatus.kGpaStatusErrorContextAlreadyOpen;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorIndexOutOfRange = GpaStatus.kGpaStatusErrorIndexOutOfRange;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCounterNotFound = GpaStatus.kGpaStatusErrorCounterNotFound;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorAlreadyEnabled = GpaStatus.kGpaStatusErrorAlreadyEnabled;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorNoCountersEnabled = GpaStatus.kGpaStatusErrorNoCountersEnabled;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorNotEnabled = GpaStatus.kGpaStatusErrorNotEnabled;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCommandListAlreadyEnded = GpaStatus.kGpaStatusErrorCommandListAlreadyEnded;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCommandListAlreadyStarted = GpaStatus.kGpaStatusErrorCommandListAlreadyStarted;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCommandListNotEnded = GpaStatus.kGpaStatusErrorCommandListNotEnded;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorNotEnoughPasses = GpaStatus.kGpaStatusErrorNotEnoughPasses;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSampleNotStarted = GpaStatus.kGpaStatusErrorSampleNotStarted;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSampleAlreadyStarted = GpaStatus.kGpaStatusErrorSampleAlreadyStarted;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSampleNotEnded = GpaStatus.kGpaStatusErrorSampleNotEnded;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCannotChangeCountersWhenSampling = GpaStatus.kGpaStatusErrorCannotChangeCountersWhenSampling;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSessionNotFound = GpaStatus.kGpaStatusErrorSessionNotFound;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSampleNotFound = GpaStatus.kGpaStatusErrorSampleNotFound;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorContextNotFound = GpaStatus.kGpaStatusErrorContextNotFound;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorCommandListNotFound = GpaStatus.kGpaStatusErrorCommandListNotFound;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorReadingSampleResult = GpaStatus.kGpaStatusErrorReadingSampleResult;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorVariableNumberOfSamplesInPasses = GpaStatus.kGpaStatusErrorVariableNumberOfSamplesInPasses;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorFailed = GpaStatus.kGpaStatusErrorFailed;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorHardwareNotSupported = GpaStatus.kGpaStatusErrorHardwareNotSupported;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorDriverNotSupported = GpaStatus.kGpaStatusErrorDriverNotSupported;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorApiNotSupported = GpaStatus.kGpaStatusErrorApiNotSupported;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorInvalidParameter = GpaStatus.kGpaStatusErrorInvalidParameter;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorLibLoadFailed = GpaStatus.kGpaStatusErrorLibLoadFailed;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorLibLoadMajorVersionMismatch = GpaStatus.kGpaStatusErrorLibLoadMajorVersionMismatch;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorLibLoadMinorVersionMismatch = GpaStatus.kGpaStatusErrorLibLoadMinorVersionMismatch;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorGpaNotInitialized = GpaStatus.kGpaStatusErrorGpaNotInitialized;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorGpaAlreadyInitialized = GpaStatus.kGpaStatusErrorGpaAlreadyInitialized;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSampleInSecondaryCommandList = GpaStatus.kGpaStatusErrorSampleInSecondaryCommandList;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorIncompatibleSampleTypes = GpaStatus.kGpaStatusErrorIncompatibleSampleTypes;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSessionAlreadyStarted = GpaStatus.kGpaStatusErrorSessionAlreadyStarted;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSessionNotStarted = GpaStatus.kGpaStatusErrorSessionNotStarted;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorSessionNotEnded = GpaStatus.kGpaStatusErrorSessionNotEnded;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorInvalidDataType = GpaStatus.kGpaStatusErrorInvalidDataType;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorInvalidCounterEquation = GpaStatus.kGpaStatusErrorInvalidCounterEquation;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorTimeout = GpaStatus.kGpaStatusErrorTimeout;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorLibAlreadyLoaded = GpaStatus.kGpaStatusErrorLibAlreadyLoaded;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorOtherSessionActive = GpaStatus.kGpaStatusErrorOtherSessionActive;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorException = GpaStatus.kGpaStatusErrorException;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusErrorInvalidCounterGroupData = GpaStatus.kGpaStatusErrorInvalidCounterGroupData;
        
        public const GPUPerfAPI.GpaStatus kGpaStatusMin = GpaStatus.kGpaStatusMin;
        
        /// <summary>
        /// Status codes used internally within GPUPerfAPI.
        /// </summary>
        public const GPUPerfAPI.GpaStatus kGpaStatusInternal = GpaStatus.kGpaStatusInternal;
        
        /// <summary>
        /// @brief Flags to pass in when initializing GPA.
        /// </summary>
        [Flags]
        public enum GpaInitializeFlags : int
        {
            /// <summary>
            /// Initialize GPA using all default options.
            /// </summary>
            kGpaInitializeDefaultBit = unchecked((int)0),
            
            /// <summary>
            /// Enable streaming counter and SQTT data to include data from all hardware queues.
            /// </summary>
            kGpaInitializeSimultaneousQueuesEnableBit = unchecked((int)1),
            
            kGpaInitializeEnableSqttBit = unchecked((int)3),
        }
        
        /// <summary>
        /// Initialize GPA using all default options.
        /// </summary>
        public const GPUPerfAPI.GpaInitializeFlags kGpaInitializeDefaultBit = GpaInitializeFlags.kGpaInitializeDefaultBit;
        
        /// <summary>
        /// Enable streaming counter and SQTT data to include data from all hardware queues.
        /// </summary>
        public const GPUPerfAPI.GpaInitializeFlags kGpaInitializeSimultaneousQueuesEnableBit = GpaInitializeFlags.kGpaInitializeSimultaneousQueuesEnableBit;
        
        public const GPUPerfAPI.GpaInitializeFlags kGpaInitializeEnableSqttBit = GpaInitializeFlags.kGpaInitializeEnableSqttBit;
        
        /// <summary>
        /// @brief Flags to pass in when opening a GPA context.
        /// </summary>
        [Flags]
        public enum GpaOpenContextFlags : int
        {
            kGpaOpenContextDefaultBit = unchecked((int)0),
            
            /// <summary>
            /// Prevent the derived counters from being exposed.
            /// </summary>
            kGpaOpenContextHideDerivedCountersBit = unchecked((int)1),
            
            /// <summary>
            /// For backwards compatibility.
            /// </summary>
            kGpaOpenContextHidePublicCountersBit = unchecked((int)1),
            
            /// <summary>
            /// Clock frequencies are not altered and may vary widely during profiling based on GPU usage and other factors.
            /// </summary>
            kGpaOpenContextClockModeNoneBit = unchecked((int)8),
            
            kGpaOpenContextClockModePeakBit = unchecked((int)16),
            
            kGpaOpenContextClockModeMinMemoryBit = unchecked((int)32),
            
            kGpaOpenContextClockModeMinEngineBit = unchecked((int)64),
            
            /// <summary>
            /// Include the hardware counters when exposing counters.
            /// </summary>
            kGpaOpenContextEnableHardwareCountersBit = unchecked((int)128),
        }
        
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextDefaultBit = GpaOpenContextFlags.kGpaOpenContextDefaultBit;
        
        /// <summary>
        /// Prevent the derived counters from being exposed.
        /// </summary>
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextHideDerivedCountersBit = GpaOpenContextFlags.kGpaOpenContextHideDerivedCountersBit;
        
        /// <summary>
        /// For backwards compatibility.
        /// </summary>
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextHidePublicCountersBit = GpaOpenContextFlags.kGpaOpenContextHidePublicCountersBit;
        
        /// <summary>
        /// Clock frequencies are not altered and may vary widely during profiling based on GPU usage and other factors.
        /// </summary>
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextClockModeNoneBit = GpaOpenContextFlags.kGpaOpenContextClockModeNoneBit;
        
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextClockModePeakBit = GpaOpenContextFlags.kGpaOpenContextClockModePeakBit;
        
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextClockModeMinMemoryBit = GpaOpenContextFlags.kGpaOpenContextClockModeMinMemoryBit;
        
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextClockModeMinEngineBit = GpaOpenContextFlags.kGpaOpenContextClockModeMinEngineBit;
        
        /// <summary>
        /// Include the hardware counters when exposing counters.
        /// </summary>
        public const GPUPerfAPI.GpaOpenContextFlags kGpaOpenContextEnableHardwareCountersBit = GpaOpenContextFlags.kGpaOpenContextEnableHardwareCountersBit;
        
        /// <summary>
        /// @brief Value type definitions.
        /// </summary>
        public enum GpaDataType : int
        {
            /// <summary>
            /// Result will be a 64-bit float.
            /// </summary>
            kGpaDataTypeFloat64 = unchecked((int)0),
            
            /// <summary>
            /// Result will be a 64-bit unsigned int.
            /// </summary>
            kGpaDataTypeUint64 = unchecked((int)1),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaDataTypeLast = unchecked((int)2),
        }
        
        /// <summary>
        /// Result will be a 64-bit float.
        /// </summary>
        public const GPUPerfAPI.GpaDataType kGpaDataTypeFloat64 = GpaDataType.kGpaDataTypeFloat64;
        
        /// <summary>
        /// Result will be a 64-bit unsigned int.
        /// </summary>
        public const GPUPerfAPI.GpaDataType kGpaDataTypeUint64 = GpaDataType.kGpaDataTypeUint64;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaDataType kGpaDataTypeLast = GpaDataType.kGpaDataTypeLast;
        
        /// <summary>
        /// @brief Result usage type definitions.
        /// </summary>
        public enum GpaUsageType : int
        {
            /// <summary>
            /// Result is a ratio of two different values or types.
            /// </summary>
            kGpaUsageTypeRatio = unchecked((int)0),
            
            /// <summary>
            /// Result is a percentage, typically within [0,100] range, but may be higher for certain counters.
            /// </summary>
            kGpaUsageTypePercentage = unchecked((int)1),
            
            /// <summary>
            /// Result is in clock cycles.
            /// </summary>
            kGpaUsageTypeCycles = unchecked((int)2),
            
            /// <summary>
            /// Result is in milliseconds.
            /// </summary>
            kGpaUsageTypeMilliseconds = unchecked((int)3),
            
            /// <summary>
            /// Result is in bytes.
            /// </summary>
            kGpaUsageTypeBytes = unchecked((int)4),
            
            /// <summary>
            /// Result is a count of items or objects (ie, vertices, triangles, threads, pixels, texels, etc).
            /// </summary>
            kGpaUsageTypeItems = unchecked((int)5),
            
            /// <summary>
            /// Result is in kilobytes.
            /// </summary>
            kGpaUsageTypeKilobytes = unchecked((int)6),
            
            /// <summary>
            /// Result is in nanoseconds.
            /// </summary>
            kGpaUsageTypeNanoseconds = unchecked((int)7),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaUsageTypeLast = unchecked((int)8),
        }
        
        /// <summary>
        /// Result is a ratio of two different values or types.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeRatio = GpaUsageType.kGpaUsageTypeRatio;
        
        /// <summary>
        /// Result is a percentage, typically within [0,100] range, but may be higher for certain counters.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypePercentage = GpaUsageType.kGpaUsageTypePercentage;
        
        /// <summary>
        /// Result is in clock cycles.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeCycles = GpaUsageType.kGpaUsageTypeCycles;
        
        /// <summary>
        /// Result is in milliseconds.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeMilliseconds = GpaUsageType.kGpaUsageTypeMilliseconds;
        
        /// <summary>
        /// Result is in bytes.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeBytes = GpaUsageType.kGpaUsageTypeBytes;
        
        /// <summary>
        /// Result is a count of items or objects (ie, vertices, triangles, threads, pixels, texels, etc).
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeItems = GpaUsageType.kGpaUsageTypeItems;
        
        /// <summary>
        /// Result is in kilobytes.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeKilobytes = GpaUsageType.kGpaUsageTypeKilobytes;
        
        /// <summary>
        /// Result is in nanoseconds.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeNanoseconds = GpaUsageType.kGpaUsageTypeNanoseconds;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaUsageType kGpaUsageTypeLast = GpaUsageType.kGpaUsageTypeLast;
        
        /// <summary>
        /// @brief Logging type definitions.
        /// </summary>
        public enum GpaLoggingType : int
        {
            /// <summary>
            /// No logging.
            /// </summary>
            kGpaLoggingNone = unchecked((int)0),
            
            /// <summary>
            /// Log errors.
            /// </summary>
            kGpaLoggingError = unchecked((int)1),
            
            /// <summary>
            /// Log messages.
            /// </summary>
            kGpaLoggingMessage = unchecked((int)2),
            
            /// <summary>
            /// Log errors and messages.
            /// </summary>
            kGpaLoggingErrorAndMessage = unchecked((int)3),
            
            /// <summary>
            /// Log errors and messages - Backward Compatibility.
            /// </summary>
            kGpaLogErrorAndMessage = unchecked((int)3),
            
            /// <summary>
            /// Log traces.
            /// </summary>
            kGpaLoggingTrace = unchecked((int)4),
            
            /// <summary>
            /// Log errors and traces.
            /// </summary>
            kGpaLoggingErrorAndTrace = unchecked((int)5),
            
            /// <summary>
            /// Log messages traces.
            /// </summary>
            kGpaLoggingMessageAndTrace = unchecked((int)6),
            
            /// <summary>
            /// Log errors and messages and traces.
            /// </summary>
            kGpaLoggingErrorMessageAndTrace = unchecked((int)7),
            
            /// <summary>
            /// Log all.
            /// </summary>
            kGpaLoggingAll = unchecked((int)255),
            
            /// <summary>
            /// Log debugging errors.
            /// </summary>
            kGpaLoggingDebugError = unchecked((int)256),
            
            /// <summary>
            /// Log debugging messages.
            /// </summary>
            kGpaLoggingDebugMessage = unchecked((int)512),
            
            /// <summary>
            /// Log debugging traces.
            /// </summary>
            kGpaLoggingDebugTrace = unchecked((int)1024),
            
            /// <summary>
            /// Log debugging counter definitions.
            /// </summary>
            kGpaLoggingDebugCounterDefinitions = unchecked((int)2048),
            
            /// <summary>
            /// Log internal GPA.
            /// </summary>
            kGpaLoggingInternal = unchecked((int)4096),
            
            /// <summary>
            /// Log all debugging.
            /// </summary>
            kGpaLoggingDebugAll = unchecked((int)65280),
        }
        
        /// <summary>
        /// No logging.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingNone = GpaLoggingType.kGpaLoggingNone;
        
        /// <summary>
        /// Log errors.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingError = GpaLoggingType.kGpaLoggingError;
        
        /// <summary>
        /// Log messages.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingMessage = GpaLoggingType.kGpaLoggingMessage;
        
        /// <summary>
        /// Log errors and messages.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingErrorAndMessage = GpaLoggingType.kGpaLoggingErrorAndMessage;
        
        /// <summary>
        /// Log errors and messages - Backward Compatibility.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLogErrorAndMessage = GpaLoggingType.kGpaLogErrorAndMessage;
        
        /// <summary>
        /// Log traces.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingTrace = GpaLoggingType.kGpaLoggingTrace;
        
        /// <summary>
        /// Log errors and traces.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingErrorAndTrace = GpaLoggingType.kGpaLoggingErrorAndTrace;
        
        /// <summary>
        /// Log messages traces.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingMessageAndTrace = GpaLoggingType.kGpaLoggingMessageAndTrace;
        
        /// <summary>
        /// Log errors and messages and traces.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingErrorMessageAndTrace = GpaLoggingType.kGpaLoggingErrorMessageAndTrace;
        
        /// <summary>
        /// Log all.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingAll = GpaLoggingType.kGpaLoggingAll;
        
        /// <summary>
        /// Log debugging errors.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingDebugError = GpaLoggingType.kGpaLoggingDebugError;
        
        /// <summary>
        /// Log debugging messages.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingDebugMessage = GpaLoggingType.kGpaLoggingDebugMessage;
        
        /// <summary>
        /// Log debugging traces.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingDebugTrace = GpaLoggingType.kGpaLoggingDebugTrace;
        
        /// <summary>
        /// Log debugging counter definitions.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingDebugCounterDefinitions = GpaLoggingType.kGpaLoggingDebugCounterDefinitions;
        
        /// <summary>
        /// Log internal GPA.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingInternal = GpaLoggingType.kGpaLoggingInternal;
        
        /// <summary>
        /// Log all debugging.
        /// </summary>
        public const GPUPerfAPI.GpaLoggingType kGpaLoggingDebugAll = GpaLoggingType.kGpaLoggingDebugAll;
        
        /// <summary>
        /// @brief APIs Supported (either publicly or internally) by GPUPerfAPI.
        /// </summary>
        public enum GpaApiType : int
        {
            /// <summary>
            /// Marker indicating first element.
            /// </summary>
            kGpaApiStart = unchecked((int)0),
            
            /// <summary>
            /// DirectX 11 API.
            /// </summary>
            kGpaApiDirectx11 = unchecked((int)0),
            
            /// <summary>
            /// DirectX 12 API.
            /// </summary>
            kGpaApiDirectx12 = unchecked((int)1),
            
            /// <summary>
            /// OpenGL API.
            /// </summary>
            kGpaApiOpengl = unchecked((int)2),
            
            /// <summary>
            /// Vulkan API.
            /// </summary>
            kGpaApiVulkan = unchecked((int)3),
            
            /// <summary>
            /// APIs which are not yet supported or for which support has been removed.
            /// </summary>
            kGpaApiNoSupport = unchecked((int)4),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaApiLast = unchecked((int)5),
        }
        
        /// <summary>
        /// Marker indicating first element.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiStart = GpaApiType.kGpaApiStart;
        
        /// <summary>
        /// DirectX 11 API.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiDirectx11 = GpaApiType.kGpaApiDirectx11;
        
        /// <summary>
        /// DirectX 12 API.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiDirectx12 = GpaApiType.kGpaApiDirectx12;
        
        /// <summary>
        /// OpenGL API.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiOpengl = GpaApiType.kGpaApiOpengl;
        
        /// <summary>
        /// Vulkan API.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiVulkan = GpaApiType.kGpaApiVulkan;
        
        /// <summary>
        /// APIs which are not yet supported or for which support has been removed.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiNoSupport = GpaApiType.kGpaApiNoSupport;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaApiType kGpaApiLast = GpaApiType.kGpaApiLast;
        
        /// <summary>
        /// @brief This enum needs to be kept up to date with GDT_HW_GENERATION in DeviceInfo.h.
        /// </summary>
        public enum GpaHwGeneration : int
        {
            /// <summary>
            /// Undefined hw generation.
            /// </summary>
            kGpaHwGenerationNone = unchecked((int)0),
            
            /// <summary>
            /// Used for nvidia cards by GPA.
            /// </summary>
            kGpaHwGenerationNvidia = unchecked((int)1),
            
            /// <summary>
            /// Used for Intel cards by GPA.
            /// </summary>
            kGpaHwGenerationIntel = unchecked((int)2),
            
            /// <summary>
            /// GFX IP 6.
            /// </summary>
            kGpaHwGenerationGfx6 = unchecked((int)3),
            
            /// <summary>
            /// For backwards compatibility.
            /// </summary>
            kGpaHwGenerationSouthernIsland = unchecked((int)3),
            
            /// <summary>
            /// GFX IP 7.
            /// </summary>
            kGpaHwGenerationGfx7 = unchecked((int)4),
            
            /// <summary>
            /// For backwards compatibility.
            /// </summary>
            kGpaHwGenerationSeaIsland = unchecked((int)4),
            
            /// <summary>
            /// GFX IP 8.
            /// </summary>
            kGpaHwGenerationGfx8 = unchecked((int)5),
            
            /// <summary>
            /// For backwards compatibility.
            /// </summary>
            kGpaHwGenerationVolcanicIsland = unchecked((int)5),
            
            /// <summary>
            /// GFX IP 9.
            /// </summary>
            kGpaHwGenerationGfx9 = unchecked((int)6),
            
            /// <summary>
            /// GFX IP 10.
            /// </summary>
            kGpaHwGenerationGfx10 = unchecked((int)7),
            
            /// <summary>
            /// GFX IP 10.3.
            /// </summary>
            kGpaHwGenerationGfx103 = unchecked((int)8),
            
            /// <summary>
            /// GFX IP 11.
            /// </summary>
            kGpaHwGenerationGfx11 = unchecked((int)9),
            
            /// <summary>
            /// CDNA
            /// </summary>
            kGpaHwGenerationCdna = unchecked((int)10),
            
            /// <summary>
            /// CDNA 2
            /// </summary>
            kGpaHwGenerationCdna2 = unchecked((int)11),
            
            /// <summary>
            /// CDNA 3
            /// </summary>
            kGpaHwGenerationCdna3 = unchecked((int)12),
            
            /// <summary>
            /// GFX IP 12.
            /// </summary>
            kGpaHwGenerationGfx12 = unchecked((int)13),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaHwGenerationLast = unchecked((int)14),
        }
        
        /// <summary>
        /// Undefined hw generation.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationNone = GpaHwGeneration.kGpaHwGenerationNone;
        
        /// <summary>
        /// Used for nvidia cards by GPA.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationNvidia = GpaHwGeneration.kGpaHwGenerationNvidia;
        
        /// <summary>
        /// Used for Intel cards by GPA.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationIntel = GpaHwGeneration.kGpaHwGenerationIntel;
        
        /// <summary>
        /// GFX IP 6.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx6 = GpaHwGeneration.kGpaHwGenerationGfx6;
        
        /// <summary>
        /// For backwards compatibility.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationSouthernIsland = GpaHwGeneration.kGpaHwGenerationSouthernIsland;
        
        /// <summary>
        /// GFX IP 7.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx7 = GpaHwGeneration.kGpaHwGenerationGfx7;
        
        /// <summary>
        /// For backwards compatibility.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationSeaIsland = GpaHwGeneration.kGpaHwGenerationSeaIsland;
        
        /// <summary>
        /// GFX IP 8.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx8 = GpaHwGeneration.kGpaHwGenerationGfx8;
        
        /// <summary>
        /// For backwards compatibility.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationVolcanicIsland = GpaHwGeneration.kGpaHwGenerationVolcanicIsland;
        
        /// <summary>
        /// GFX IP 9.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx9 = GpaHwGeneration.kGpaHwGenerationGfx9;
        
        /// <summary>
        /// GFX IP 10.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx10 = GpaHwGeneration.kGpaHwGenerationGfx10;
        
        /// <summary>
        /// GFX IP 10.3.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx103 = GpaHwGeneration.kGpaHwGenerationGfx103;
        
        /// <summary>
        /// GFX IP 11.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx11 = GpaHwGeneration.kGpaHwGenerationGfx11;
        
        /// <summary>
        /// CDNA
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationCdna = GpaHwGeneration.kGpaHwGenerationCdna;
        
        /// <summary>
        /// CDNA 2
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationCdna2 = GpaHwGeneration.kGpaHwGenerationCdna2;
        
        /// <summary>
        /// CDNA 3
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationCdna3 = GpaHwGeneration.kGpaHwGenerationCdna3;
        
        /// <summary>
        /// GFX IP 12.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationGfx12 = GpaHwGeneration.kGpaHwGenerationGfx12;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaHwGeneration kGpaHwGenerationLast = GpaHwGeneration.kGpaHwGenerationLast;
        
        /// <summary>
        /// @brief Command list / command buffer types.
        /// </summary>
        public enum GpaCommandListType : int
        {
            /// <summary>
            /// No command list, used for APIs that do not directly expose command lists or command buffers (DirectX 11, OpenGL).
            /// </summary>
            kGpaCommandListNone = unchecked((int)0),
            
            /// <summary>
            /// Corresponds to DirectX 12 direct/compute/copy command list and Vulkan primary vkCommandBuffer.
            /// </summary>
            kGpaCommandListPrimary = unchecked((int)1),
            
            /// <summary>
            /// Corresponds to DirectX 12 bundle and Vulkan secondary vkCommandBuffer.
            /// </summary>
            kGpaCommandListSecondary = unchecked((int)2),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaCommandListLast = unchecked((int)3),
        }
        
        /// <summary>
        /// No command list, used for APIs that do not directly expose command lists or command buffers (DirectX 11, OpenGL).
        /// </summary>
        public const GPUPerfAPI.GpaCommandListType kGpaCommandListNone = GpaCommandListType.kGpaCommandListNone;
        
        /// <summary>
        /// Corresponds to DirectX 12 direct/compute/copy command list and Vulkan primary vkCommandBuffer.
        /// </summary>
        public const GPUPerfAPI.GpaCommandListType kGpaCommandListPrimary = GpaCommandListType.kGpaCommandListPrimary;
        
        /// <summary>
        /// Corresponds to DirectX 12 bundle and Vulkan secondary vkCommandBuffer.
        /// </summary>
        public const GPUPerfAPI.GpaCommandListType kGpaCommandListSecondary = GpaCommandListType.kGpaCommandListSecondary;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaCommandListType kGpaCommandListLast = GpaCommandListType.kGpaCommandListLast;
        
        /// <summary>
        /// @brief Counter sample types - used to indicate which sample types are supported by a counter.
        /// </summary>
        public enum GpaCounterSampleType : int
        {
            /// <summary>
            /// Discrete counter type -- discrete counters provide a single value per workload measured.
            /// </summary>
            kGpaCounterSampleTypeDiscrete = unchecked((int)1),
            
            /// <summary>
            /// Streaming counter type -- streaming counters provide interval-based multiple values per workload measured.
            /// </summary>
            kGpaCounterSampleTypeStreaming = unchecked((int)2),
        }
        
        /// <summary>
        /// Discrete counter type -- discrete counters provide a single value per workload measured.
        /// </summary>
        public const GPUPerfAPI.GpaCounterSampleType kGpaCounterSampleTypeDiscrete = GpaCounterSampleType.kGpaCounterSampleTypeDiscrete;
        
        /// <summary>
        /// Streaming counter type -- streaming counters provide interval-based multiple values per workload measured.
        /// </summary>
        public const GPUPerfAPI.GpaCounterSampleType kGpaCounterSampleTypeStreaming = GpaCounterSampleType.kGpaCounterSampleTypeStreaming;
        
        /// <summary>
        /// @brief Context Sample types -- used to indicate which sample types are supported by a context. A context can support any combination of these.
        /// </summary>
        [Flags]
        public enum GpaContextSampleTypeFlags : int
        {
            /// <summary>
            /// Discrete counters sample type -- discrete counters provide a single value per workload measured.
            /// </summary>
            kGpaContextSampleTypeDiscreteCounter = unchecked((int)1),
            
            kGpaContextSampleTypeStreamingCounter = unchecked((int)2),
            
            kGpaContextSampleTypeSqtt = unchecked((int)4),
        }
        
        /// <summary>
        /// Discrete counters sample type -- discrete counters provide a single value per workload measured.
        /// </summary>
        public const GPUPerfAPI.GpaContextSampleTypeFlags kGpaContextSampleTypeDiscreteCounter = GpaContextSampleTypeFlags.kGpaContextSampleTypeDiscreteCounter;
        
        public const GPUPerfAPI.GpaContextSampleTypeFlags kGpaContextSampleTypeStreamingCounter = GpaContextSampleTypeFlags.kGpaContextSampleTypeStreamingCounter;
        
        public const GPUPerfAPI.GpaContextSampleTypeFlags kGpaContextSampleTypeSqtt = GpaContextSampleTypeFlags.kGpaContextSampleTypeSqtt;
        
        /// <summary>
        /// @brief Session Sample types -- used by the client to tell GPUPerfAPI which sample types will be created for a session.
        /// </summary>
        public enum GpaSessionSampleType : int
        {
            /// <summary>
            /// Discrete counters sample type -- discrete counters provide a single value per workload measured.
            /// </summary>
            kGpaSessionSampleTypeDiscreteCounter = unchecked((int)0),
            
            /// <summary>
            /// Streaming counters sample type -- streaming counters provide interval-based multiple values per workload measured.
            /// </summary>
            kGpaSessionSampleTypeStreamingCounter = unchecked((int)1),
            
            /// <summary>
            /// SQTT sample type -- provides detailed wave-level SQTT information per workload measured. For some driver stacks, the SQTT-data may be wrapped in an RGP-file format.
            /// </summary>
            kGpaSessionSampleTypeSqtt = unchecked((int)2),
            
            /// <summary>
            /// Streaming counters and SQTT are enabled.
            /// </summary>
            kGpaSessionSampleTypeStreamingCounterAndSqtt = unchecked((int)3),
            
            /// <summary>
            /// Marker indicating last element.
            /// </summary>
            kGpaSessionSampleTypeLast = unchecked((int)4),
        }
        
        /// <summary>
        /// Discrete counters sample type -- discrete counters provide a single value per workload measured.
        /// </summary>
        public const GPUPerfAPI.GpaSessionSampleType kGpaSessionSampleTypeDiscreteCounter = GpaSessionSampleType.kGpaSessionSampleTypeDiscreteCounter;
        
        /// <summary>
        /// Streaming counters sample type -- streaming counters provide interval-based multiple values per workload measured.
        /// </summary>
        public const GPUPerfAPI.GpaSessionSampleType kGpaSessionSampleTypeStreamingCounter = GpaSessionSampleType.kGpaSessionSampleTypeStreamingCounter;
        
        /// <summary>
        /// SQTT sample type -- provides detailed wave-level SQTT information per workload measured. For some driver stacks, the SQTT-data may be wrapped in an RGP-file format.
        /// </summary>
        public const GPUPerfAPI.GpaSessionSampleType kGpaSessionSampleTypeSqtt = GpaSessionSampleType.kGpaSessionSampleTypeSqtt;
        
        /// <summary>
        /// Streaming counters and SQTT are enabled.
        /// </summary>
        public const GPUPerfAPI.GpaSessionSampleType kGpaSessionSampleTypeStreamingCounterAndSqtt = GpaSessionSampleType.kGpaSessionSampleTypeStreamingCounterAndSqtt;
        
        /// <summary>
        /// Marker indicating last element.
        /// </summary>
        public const GPUPerfAPI.GpaSessionSampleType kGpaSessionSampleTypeLast = GpaSessionSampleType.kGpaSessionSampleTypeLast;
        
        /// <summary>
        /// @brief Type used to define the mask of instructions included in SQTT data.
        /// </summary>
        [Flags]
        public enum GpaSqttInstructionFlags : int
        {
            /// <summary>
            /// Exclude all instructions from SQTT data.
            /// </summary>
            kGpaSqttInstructionTypeNone = unchecked((int)0),
            
            /// <summary>
            /// Include all instructions in SQTT data.
            /// </summary>
            kGpaSqttInstructionTypeAll = unchecked((int)2147483647),
        }
        
        /// <summary>
        /// Exclude all instructions from SQTT data.
        /// </summary>
        public const GPUPerfAPI.GpaSqttInstructionFlags kGpaSqttInstructionTypeNone = GpaSqttInstructionFlags.kGpaSqttInstructionTypeNone;
        
        /// <summary>
        /// Include all instructions in SQTT data.
        /// </summary>
        public const GPUPerfAPI.GpaSqttInstructionFlags kGpaSqttInstructionTypeAll = GpaSqttInstructionFlags.kGpaSqttInstructionTypeAll;
        
        /// <summary>
        /// GPA SPM counter info.
        /// </summary>
        public partial struct GpaSpmCounterInfo
        {
            /// <summary>
            /// GPU block identifier.
            /// </summary>
            public uint gpu_block_id;
            
            /// <summary>
            /// GPU block instance.
            /// </summary>
            public uint gpu_block_instance;
            
            /// <summary>
            /// Offset from the start of counterDeltaValues for the deltas for this counter instance.
            /// </summary>
            public uint data_offset;
            
            /// <summary>
            /// Event index.
            /// </summary>
            public uint event_index;
        }
        
        /// <summary>
        /// GPA SPM data
        /// </summary>
        public partial struct GpaSpmData
        {
            /// <summary>
            /// Number of timestamps.
            /// </summary>
            public uint number_of_timestamps;
            
            /// <summary>
            /// Number of SpmCounterInfo structs.
            /// </summary>
            public uint number_of_spm_counter_info;
            
            /// <summary>
            /// Number of CounterData values.
            /// </summary>
            public uint number_of_counter_data;
            
            /// <summary>
            /// Number of bytes for each CounterData entry.
            /// </summary>
            public uint number_of_bytes_per_counter_data;
            
            /// <summary>
            /// Array of number_of_timestamps number of timestamps.
            /// </summary>
            public ulong* timestamps;
            
            /// <summary>
            /// Array of number_of_spm_counter_info number of SpmCounterInfo.
            /// </summary>
            public GPUPerfAPI.GpaSpmCounterInfo* spm_counter_info;
            
            /// <summary>
            /// Array of number_of_spm_counter_info * number_of_timestamps counter delta values (may be 16 or 32-bit values).
            /// </summary>
            public ushort* counter_data_16bit;
        }
        
        /// <summary>
        /// Context ID opaque pointer type.
        /// </summary>
        public readonly partial struct GpaContextId : IEquatable<GPUPerfAPI.GpaContextId>
        {
            public GpaContextId(nint value) => this.Value = value;
            
            public nint Value { get; }
            
            public override bool Equals(object obj) => obj is GpaContextId other && Equals(other);
            
            public bool Equals(GpaContextId other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator nint (GPUPerfAPI.GpaContextId from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaContextId (nint from) => new GPUPerfAPI.GpaContextId(from);
            
            public static bool operator ==(GpaContextId left, GpaContextId right) => left.Equals(right);
            
            public static bool operator !=(GpaContextId left, GpaContextId right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Session ID opaque pointer type.
        /// </summary>
        public readonly partial struct GpaSessionId : IEquatable<GPUPerfAPI.GpaSessionId>
        {
            public GpaSessionId(nint value) => this.Value = value;
            
            public nint Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSessionId other && Equals(other);
            
            public bool Equals(GpaSessionId other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator nint (GPUPerfAPI.GpaSessionId from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSessionId (nint from) => new GPUPerfAPI.GpaSessionId(from);
            
            public static bool operator ==(GpaSessionId left, GpaSessionId right) => left.Equals(right);
            
            public static bool operator !=(GpaSessionId left, GpaSessionId right) => !left.Equals(right);
        }
        
        public readonly partial struct GpaUuid : IEquatable<GPUPerfAPI.GpaUuid>
        {
            public GpaUuid(System.Guid value) => this.Value = value;
            
            public System.Guid Value { get; }
            
            public override bool Equals(object obj) => obj is GpaUuid other && Equals(other);
            
            public bool Equals(GpaUuid other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator System.Guid (GPUPerfAPI.GpaUuid from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaUuid (System.Guid from) => new GPUPerfAPI.GpaUuid(from);
            
            public static bool operator ==(GpaUuid left, GpaUuid right) => left.Equals(right);
            
            public static bool operator !=(GpaUuid left, GpaUuid right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Command List ID opaque pointer type.
        /// </summary>
        public readonly partial struct GpaCommandListId : IEquatable<GPUPerfAPI.GpaCommandListId>
        {
            public GpaCommandListId(nint value) => this.Value = value;
            
            public nint Value { get; }
            
            public override bool Equals(object obj) => obj is GpaCommandListId other && Equals(other);
            
            public bool Equals(GpaCommandListId other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator nint (GPUPerfAPI.GpaCommandListId from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaCommandListId (nint from) => new GPUPerfAPI.GpaCommandListId(from);
            
            public static bool operator ==(GpaCommandListId left, GpaCommandListId right) => left.Equals(right);
            
            public static bool operator !=(GpaCommandListId left, GpaCommandListId right) => !left.Equals(right);
        }
    }
}
