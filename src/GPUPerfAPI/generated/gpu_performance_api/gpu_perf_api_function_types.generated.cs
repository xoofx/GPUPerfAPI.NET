// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
//
// This file was automatically generated by GPUPerfAPI.CodeGen - DO NOT EDIT

using System;
namespace GPUPerfAPI
{
    public static unsafe partial class GPUPerfAPI
    {
        /// <summary>
        /// Typedef for a function pointer for GpaGetFuncTable.
        /// </summary>
        public readonly partial struct GpaGetFuncTablePtrType : IEquatable<GPUPerfAPI.GpaGetFuncTablePtrType>
        {
            public GpaGetFuncTablePtrType(delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetFuncTablePtrType other && Equals(other);
            
            public bool Equals(GpaGetFuncTablePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetFuncTablePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetFuncTablePtrType (delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetFuncTablePtrType(from);
            
            public static bool operator ==(GpaGetFuncTablePtrType left, GpaGetFuncTablePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetFuncTablePtrType left, GpaGetFuncTablePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for a logging callback function.
        /// </summary>
        public readonly partial struct GpaLoggingCallbackPtrType : IEquatable<GPUPerfAPI.GpaLoggingCallbackPtrType>
        {
            public GpaLoggingCallbackPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, byte*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, byte*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaLoggingCallbackPtrType other && Equals(other);
            
            public bool Equals(GpaLoggingCallbackPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, byte*, void> (GPUPerfAPI.GpaLoggingCallbackPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaLoggingCallbackPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, byte*, void> from) => new GPUPerfAPI.GpaLoggingCallbackPtrType(from);
            
            public static bool operator ==(GpaLoggingCallbackPtrType left, GpaLoggingCallbackPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaLoggingCallbackPtrType left, GpaLoggingCallbackPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaRegisterLoggingCallback.
        /// </summary>
        public readonly partial struct GpaRegisterLoggingCallbackPtrType : IEquatable<GPUPerfAPI.GpaRegisterLoggingCallbackPtrType>
        {
            public GpaRegisterLoggingCallbackPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, GPUPerfAPI.GpaLoggingCallbackPtrType, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, GPUPerfAPI.GpaLoggingCallbackPtrType, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaRegisterLoggingCallbackPtrType other && Equals(other);
            
            public bool Equals(GpaRegisterLoggingCallbackPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, GPUPerfAPI.GpaLoggingCallbackPtrType, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaRegisterLoggingCallbackPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaRegisterLoggingCallbackPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaLoggingType, GPUPerfAPI.GpaLoggingCallbackPtrType, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaRegisterLoggingCallbackPtrType(from);
            
            public static bool operator ==(GpaRegisterLoggingCallbackPtrType left, GpaRegisterLoggingCallbackPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaRegisterLoggingCallbackPtrType left, GpaRegisterLoggingCallbackPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaInitialize.
        /// </summary>
        public readonly partial struct GpaInitializePtrType : IEquatable<GPUPerfAPI.GpaInitializePtrType>
        {
            public GpaInitializePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaInitializeFlags, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaInitializeFlags, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaInitializePtrType other && Equals(other);
            
            public bool Equals(GpaInitializePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaInitializeFlags, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaInitializePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaInitializePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaInitializeFlags, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaInitializePtrType(from);
            
            public static bool operator ==(GpaInitializePtrType left, GpaInitializePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaInitializePtrType left, GpaInitializePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaDestroy.
        /// </summary>
        public readonly partial struct GpaDestroyPtrType : IEquatable<GPUPerfAPI.GpaDestroyPtrType>
        {
            public GpaDestroyPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaDestroyPtrType other && Equals(other);
            
            public bool Equals(GpaDestroyPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaDestroyPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaDestroyPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaDestroyPtrType(from);
            
            public static bool operator ==(GpaDestroyPtrType left, GpaDestroyPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaDestroyPtrType left, GpaDestroyPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaOpenContext.
        /// </summary>
        public readonly partial struct GpaOpenContextPtrType : IEquatable<GPUPerfAPI.GpaOpenContextPtrType>
        {
            public GpaOpenContextPtrType(delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaOpenContextFlags, GPUPerfAPI.GpaContextId*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaOpenContextFlags, GPUPerfAPI.GpaContextId*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaOpenContextPtrType other && Equals(other);
            
            public bool Equals(GpaOpenContextPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaOpenContextFlags, GPUPerfAPI.GpaContextId*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaOpenContextPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaOpenContextPtrType (delegate*unmanaged[Cdecl]<void*, GPUPerfAPI.GpaOpenContextFlags, GPUPerfAPI.GpaContextId*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaOpenContextPtrType(from);
            
            public static bool operator ==(GpaOpenContextPtrType left, GpaOpenContextPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaOpenContextPtrType left, GpaOpenContextPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaCloseContext.
        /// </summary>
        public readonly partial struct GpaCloseContextPtrType : IEquatable<GPUPerfAPI.GpaCloseContextPtrType>
        {
            public GpaCloseContextPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaCloseContextPtrType other && Equals(other);
            
            public bool Equals(GpaCloseContextPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaCloseContextPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaCloseContextPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaCloseContextPtrType(from);
            
            public static bool operator ==(GpaCloseContextPtrType left, GpaCloseContextPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaCloseContextPtrType left, GpaCloseContextPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetSupportedSampleTypes.
        /// </summary>
        public readonly partial struct GpaGetSupportedSampleTypesPtrType : IEquatable<GPUPerfAPI.GpaGetSupportedSampleTypesPtrType>
        {
            public GpaGetSupportedSampleTypesPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaContextSampleTypeFlags*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaContextSampleTypeFlags*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetSupportedSampleTypesPtrType other && Equals(other);
            
            public bool Equals(GpaGetSupportedSampleTypesPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaContextSampleTypeFlags*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetSupportedSampleTypesPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetSupportedSampleTypesPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaContextSampleTypeFlags*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetSupportedSampleTypesPtrType(from);
            
            public static bool operator ==(GpaGetSupportedSampleTypesPtrType left, GpaGetSupportedSampleTypesPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetSupportedSampleTypesPtrType left, GpaGetSupportedSampleTypesPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetDeviceAndRevisionId.
        /// </summary>
        public readonly partial struct GpaGetDeviceAndRevisionIdPtrType : IEquatable<GPUPerfAPI.GpaGetDeviceAndRevisionIdPtrType>
        {
            public GpaGetDeviceAndRevisionIdPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint*, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint*, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetDeviceAndRevisionIdPtrType other && Equals(other);
            
            public bool Equals(GpaGetDeviceAndRevisionIdPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint*, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetDeviceAndRevisionIdPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetDeviceAndRevisionIdPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint*, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetDeviceAndRevisionIdPtrType(from);
            
            public static bool operator ==(GpaGetDeviceAndRevisionIdPtrType left, GpaGetDeviceAndRevisionIdPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetDeviceAndRevisionIdPtrType left, GpaGetDeviceAndRevisionIdPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetDeviceName.
        /// </summary>
        public readonly partial struct GpaGetDeviceNamePtrType : IEquatable<GPUPerfAPI.GpaGetDeviceNamePtrType>
        {
            public GpaGetDeviceNamePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetDeviceNamePtrType other && Equals(other);
            
            public bool Equals(GpaGetDeviceNamePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetDeviceNamePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetDeviceNamePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetDeviceNamePtrType(from);
            
            public static bool operator ==(GpaGetDeviceNamePtrType left, GpaGetDeviceNamePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetDeviceNamePtrType left, GpaGetDeviceNamePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaUpdateDeviceInformation
        /// </summary>
        public readonly partial struct GpaUpdateDeviceInformationPtrType : IEquatable<GPUPerfAPI.GpaUpdateDeviceInformationPtrType>
        {
            public GpaUpdateDeviceInformationPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint, uint, uint, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint, uint, uint, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaUpdateDeviceInformationPtrType other && Equals(other);
            
            public bool Equals(GpaUpdateDeviceInformationPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint, uint, uint, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaUpdateDeviceInformationPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaUpdateDeviceInformationPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, uint, uint, uint, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaUpdateDeviceInformationPtrType(from);
            
            public static bool operator ==(GpaUpdateDeviceInformationPtrType left, GpaUpdateDeviceInformationPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaUpdateDeviceInformationPtrType left, GpaUpdateDeviceInformationPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetNumCounters.
        /// </summary>
        public readonly partial struct GpaGetNumCountersPtrType : IEquatable<GPUPerfAPI.GpaGetNumCountersPtrType>
        {
            public GpaGetNumCountersPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetNumCountersPtrType other && Equals(other);
            
            public bool Equals(GpaGetNumCountersPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetNumCountersPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetNumCountersPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetNumCountersPtrType(from);
            
            public static bool operator ==(GpaGetNumCountersPtrType left, GpaGetNumCountersPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetNumCountersPtrType left, GpaGetNumCountersPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterName.
        /// </summary>
        public readonly partial struct GpaGetCounterNamePtrType : IEquatable<GPUPerfAPI.GpaGetCounterNamePtrType>
        {
            public GpaGetCounterNamePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterNamePtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterNamePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterNamePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterNamePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterNamePtrType(from);
            
            public static bool operator ==(GpaGetCounterNamePtrType left, GpaGetCounterNamePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterNamePtrType left, GpaGetCounterNamePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterIndex.
        /// </summary>
        public readonly partial struct GpaGetCounterIndexPtrType : IEquatable<GPUPerfAPI.GpaGetCounterIndexPtrType>
        {
            public GpaGetCounterIndexPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterIndexPtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterIndexPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterIndexPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterIndexPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterIndexPtrType(from);
            
            public static bool operator ==(GpaGetCounterIndexPtrType left, GpaGetCounterIndexPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterIndexPtrType left, GpaGetCounterIndexPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterGroup.
        /// </summary>
        public readonly partial struct GpaGetCounterGroupPtrType : IEquatable<GPUPerfAPI.GpaGetCounterGroupPtrType>
        {
            public GpaGetCounterGroupPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterGroupPtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterGroupPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterGroupPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterGroupPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterGroupPtrType(from);
            
            public static bool operator ==(GpaGetCounterGroupPtrType left, GpaGetCounterGroupPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterGroupPtrType left, GpaGetCounterGroupPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterDescription.
        /// </summary>
        public readonly partial struct GpaGetCounterDescriptionPtrType : IEquatable<GPUPerfAPI.GpaGetCounterDescriptionPtrType>
        {
            public GpaGetCounterDescriptionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterDescriptionPtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterDescriptionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterDescriptionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterDescriptionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterDescriptionPtrType(from);
            
            public static bool operator ==(GpaGetCounterDescriptionPtrType left, GpaGetCounterDescriptionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterDescriptionPtrType left, GpaGetCounterDescriptionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterDataType.
        /// </summary>
        public readonly partial struct GpaGetCounterDataTypePtrType : IEquatable<GPUPerfAPI.GpaGetCounterDataTypePtrType>
        {
            public GpaGetCounterDataTypePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaDataType*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaDataType*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterDataTypePtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterDataTypePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaDataType*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterDataTypePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterDataTypePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaDataType*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterDataTypePtrType(from);
            
            public static bool operator ==(GpaGetCounterDataTypePtrType left, GpaGetCounterDataTypePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterDataTypePtrType left, GpaGetCounterDataTypePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterUsageType.
        /// </summary>
        public readonly partial struct GpaGetCounterUsageTypePtrType : IEquatable<GPUPerfAPI.GpaGetCounterUsageTypePtrType>
        {
            public GpaGetCounterUsageTypePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUsageType*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUsageType*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterUsageTypePtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterUsageTypePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUsageType*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterUsageTypePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterUsageTypePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUsageType*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterUsageTypePtrType(from);
            
            public static bool operator ==(GpaGetCounterUsageTypePtrType left, GpaGetCounterUsageTypePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterUsageTypePtrType left, GpaGetCounterUsageTypePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterUuid.
        /// </summary>
        public readonly partial struct GpaGetCounterUuidPtrType : IEquatable<GPUPerfAPI.GpaGetCounterUuidPtrType>
        {
            public GpaGetCounterUuidPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUuid*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUuid*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterUuidPtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterUuidPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUuid*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterUuidPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterUuidPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaUuid*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterUuidPtrType(from);
            
            public static bool operator ==(GpaGetCounterUuidPtrType left, GpaGetCounterUuidPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterUuidPtrType left, GpaGetCounterUuidPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetCounterSampleType.
        /// </summary>
        public readonly partial struct GpaGetCounterSampleTypePtrType : IEquatable<GPUPerfAPI.GpaGetCounterSampleTypePtrType>
        {
            public GpaGetCounterSampleTypePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaCounterSampleType*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaCounterSampleType*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetCounterSampleTypePtrType other && Equals(other);
            
            public bool Equals(GpaGetCounterSampleTypePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaCounterSampleType*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetCounterSampleTypePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetCounterSampleTypePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaCounterSampleType*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetCounterSampleTypePtrType(from);
            
            public static bool operator ==(GpaGetCounterSampleTypePtrType left, GpaGetCounterSampleTypePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetCounterSampleTypePtrType left, GpaGetCounterSampleTypePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetDataTypeAsStr.
        /// </summary>
        public readonly partial struct GpaGetDataTypeAsStrPtrType : IEquatable<GPUPerfAPI.GpaGetDataTypeAsStrPtrType>
        {
            public GpaGetDataTypeAsStrPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaDataType, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaDataType, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetDataTypeAsStrPtrType other && Equals(other);
            
            public bool Equals(GpaGetDataTypeAsStrPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaDataType, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetDataTypeAsStrPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetDataTypeAsStrPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaDataType, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetDataTypeAsStrPtrType(from);
            
            public static bool operator ==(GpaGetDataTypeAsStrPtrType left, GpaGetDataTypeAsStrPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetDataTypeAsStrPtrType left, GpaGetDataTypeAsStrPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetUsageTypeAsStr.
        /// </summary>
        public readonly partial struct GpaGetUsageTypeAsStrPtrType : IEquatable<GPUPerfAPI.GpaGetUsageTypeAsStrPtrType>
        {
            public GpaGetUsageTypeAsStrPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaUsageType, byte**, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaUsageType, byte**, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetUsageTypeAsStrPtrType other && Equals(other);
            
            public bool Equals(GpaGetUsageTypeAsStrPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaUsageType, byte**, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetUsageTypeAsStrPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetUsageTypeAsStrPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaUsageType, byte**, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetUsageTypeAsStrPtrType(from);
            
            public static bool operator ==(GpaGetUsageTypeAsStrPtrType left, GpaGetUsageTypeAsStrPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetUsageTypeAsStrPtrType left, GpaGetUsageTypeAsStrPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaCreateSession.
        /// </summary>
        public readonly partial struct GpaCreateSessionPtrType : IEquatable<GPUPerfAPI.GpaCreateSessionPtrType>
        {
            public GpaCreateSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaSessionSampleType, GPUPerfAPI.GpaSessionId*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaSessionSampleType, GPUPerfAPI.GpaSessionId*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaCreateSessionPtrType other && Equals(other);
            
            public bool Equals(GpaCreateSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaSessionSampleType, GPUPerfAPI.GpaSessionId*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaCreateSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaCreateSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaSessionSampleType, GPUPerfAPI.GpaSessionId*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaCreateSessionPtrType(from);
            
            public static bool operator ==(GpaCreateSessionPtrType left, GpaCreateSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaCreateSessionPtrType left, GpaCreateSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaDeleteSession.
        /// </summary>
        public readonly partial struct GpaDeleteSessionPtrType : IEquatable<GPUPerfAPI.GpaDeleteSessionPtrType>
        {
            public GpaDeleteSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaDeleteSessionPtrType other && Equals(other);
            
            public bool Equals(GpaDeleteSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaDeleteSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaDeleteSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaDeleteSessionPtrType(from);
            
            public static bool operator ==(GpaDeleteSessionPtrType left, GpaDeleteSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaDeleteSessionPtrType left, GpaDeleteSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaBeginSession.
        /// </summary>
        public readonly partial struct GpaBeginSessionPtrType : IEquatable<GPUPerfAPI.GpaBeginSessionPtrType>
        {
            public GpaBeginSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaBeginSessionPtrType other && Equals(other);
            
            public bool Equals(GpaBeginSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaBeginSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaBeginSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaBeginSessionPtrType(from);
            
            public static bool operator ==(GpaBeginSessionPtrType left, GpaBeginSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaBeginSessionPtrType left, GpaBeginSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEndSession.
        /// </summary>
        public readonly partial struct GpaEndSessionPtrType : IEquatable<GPUPerfAPI.GpaEndSessionPtrType>
        {
            public GpaEndSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEndSessionPtrType other && Equals(other);
            
            public bool Equals(GpaEndSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEndSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEndSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEndSessionPtrType(from);
            
            public static bool operator ==(GpaEndSessionPtrType left, GpaEndSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEndSessionPtrType left, GpaEndSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaResetSession.
        /// </summary>
        public readonly partial struct GpaResetSessionPtrType : IEquatable<GPUPerfAPI.GpaResetSessionPtrType>
        {
            public GpaResetSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaResetSessionPtrType other && Equals(other);
            
            public bool Equals(GpaResetSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaResetSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaResetSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaResetSessionPtrType(from);
            
            public static bool operator ==(GpaResetSessionPtrType left, GpaResetSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaResetSessionPtrType left, GpaResetSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaAbortSession.
        /// </summary>
        public readonly partial struct GpaAbortSessionPtrType : IEquatable<GPUPerfAPI.GpaAbortSessionPtrType>
        {
            public GpaAbortSessionPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaAbortSessionPtrType other && Equals(other);
            
            public bool Equals(GpaAbortSessionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaAbortSessionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaAbortSessionPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaAbortSessionPtrType(from);
            
            public static bool operator ==(GpaAbortSessionPtrType left, GpaAbortSessionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaAbortSessionPtrType left, GpaAbortSessionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttGetInstructionMask
        /// </summary>
        public readonly partial struct GpaSqttGetInstructionMaskPtrType : IEquatable<GPUPerfAPI.GpaSqttGetInstructionMaskPtrType>
        {
            public GpaSqttGetInstructionMaskPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttGetInstructionMaskPtrType other && Equals(other);
            
            public bool Equals(GpaSqttGetInstructionMaskPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttGetInstructionMaskPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttGetInstructionMaskPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttGetInstructionMaskPtrType(from);
            
            public static bool operator ==(GpaSqttGetInstructionMaskPtrType left, GpaSqttGetInstructionMaskPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttGetInstructionMaskPtrType left, GpaSqttGetInstructionMaskPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttSetInstructionMask
        /// </summary>
        public readonly partial struct GpaSqttSetInstructionMaskPtrType : IEquatable<GPUPerfAPI.GpaSqttSetInstructionMaskPtrType>
        {
            public GpaSqttSetInstructionMaskPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttSetInstructionMaskPtrType other && Equals(other);
            
            public bool Equals(GpaSqttSetInstructionMaskPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttSetInstructionMaskPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttSetInstructionMaskPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSqttInstructionFlags, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttSetInstructionMaskPtrType(from);
            
            public static bool operator ==(GpaSqttSetInstructionMaskPtrType left, GpaSqttSetInstructionMaskPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttSetInstructionMaskPtrType left, GpaSqttSetInstructionMaskPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttGetComputeUnitId
        /// </summary>
        public readonly partial struct GpaSqttGetComputeUnitIdPtrType : IEquatable<GPUPerfAPI.GpaSqttGetComputeUnitIdPtrType>
        {
            public GpaSqttGetComputeUnitIdPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttGetComputeUnitIdPtrType other && Equals(other);
            
            public bool Equals(GpaSqttGetComputeUnitIdPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttGetComputeUnitIdPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttGetComputeUnitIdPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttGetComputeUnitIdPtrType(from);
            
            public static bool operator ==(GpaSqttGetComputeUnitIdPtrType left, GpaSqttGetComputeUnitIdPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttGetComputeUnitIdPtrType left, GpaSqttGetComputeUnitIdPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttSetComputeUnitId
        /// </summary>
        public readonly partial struct GpaSqttSetComputeUnitIdPtrType : IEquatable<GPUPerfAPI.GpaSqttSetComputeUnitIdPtrType>
        {
            public GpaSqttSetComputeUnitIdPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttSetComputeUnitIdPtrType other && Equals(other);
            
            public bool Equals(GpaSqttSetComputeUnitIdPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttSetComputeUnitIdPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttSetComputeUnitIdPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttSetComputeUnitIdPtrType(from);
            
            public static bool operator ==(GpaSqttSetComputeUnitIdPtrType left, GpaSqttSetComputeUnitIdPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttSetComputeUnitIdPtrType left, GpaSqttSetComputeUnitIdPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttBegin
        /// </summary>
        public readonly partial struct GpaSqttBeginPtrType : IEquatable<GPUPerfAPI.GpaSqttBeginPtrType>
        {
            public GpaSqttBeginPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttBeginPtrType other && Equals(other);
            
            public bool Equals(GpaSqttBeginPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttBeginPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttBeginPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttBeginPtrType(from);
            
            public static bool operator ==(GpaSqttBeginPtrType left, GpaSqttBeginPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttBeginPtrType left, GpaSqttBeginPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttEnd
        /// </summary>
        public readonly partial struct GpaSqttEndPtrType : IEquatable<GPUPerfAPI.GpaSqttEndPtrType>
        {
            public GpaSqttEndPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttEndPtrType other && Equals(other);
            
            public bool Equals(GpaSqttEndPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttEndPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttEndPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttEndPtrType(from);
            
            public static bool operator ==(GpaSqttEndPtrType left, GpaSqttEndPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttEndPtrType left, GpaSqttEndPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttGetSampleResultSize
        /// </summary>
        public readonly partial struct GpaSqttGetSampleResultSizePtrType : IEquatable<GPUPerfAPI.GpaSqttGetSampleResultSizePtrType>
        {
            public GpaSqttGetSampleResultSizePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttGetSampleResultSizePtrType other && Equals(other);
            
            public bool Equals(GpaSqttGetSampleResultSizePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttGetSampleResultSizePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttGetSampleResultSizePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttGetSampleResultSizePtrType(from);
            
            public static bool operator ==(GpaSqttGetSampleResultSizePtrType left, GpaSqttGetSampleResultSizePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttGetSampleResultSizePtrType left, GpaSqttGetSampleResultSizePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSqttGetSampleResult
        /// </summary>
        public readonly partial struct GpaSqttGetSampleResultPtrType : IEquatable<GPUPerfAPI.GpaSqttGetSampleResultPtrType>
        {
            public GpaSqttGetSampleResultPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSqttGetSampleResultPtrType other && Equals(other);
            
            public bool Equals(GpaSqttGetSampleResultPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSqttGetSampleResultPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSqttGetSampleResultPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSqttGetSampleResultPtrType(from);
            
            public static bool operator ==(GpaSqttGetSampleResultPtrType left, GpaSqttGetSampleResultPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSqttGetSampleResultPtrType left, GpaSqttGetSampleResultPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmSetSampleInterval
        /// </summary>
        public readonly partial struct GpaSpmSetSampleIntervalPtrType : IEquatable<GPUPerfAPI.GpaSpmSetSampleIntervalPtrType>
        {
            public GpaSpmSetSampleIntervalPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmSetSampleIntervalPtrType other && Equals(other);
            
            public bool Equals(GpaSpmSetSampleIntervalPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmSetSampleIntervalPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmSetSampleIntervalPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmSetSampleIntervalPtrType(from);
            
            public static bool operator ==(GpaSpmSetSampleIntervalPtrType left, GpaSpmSetSampleIntervalPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmSetSampleIntervalPtrType left, GpaSpmSetSampleIntervalPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmSetDuration
        /// </summary>
        public readonly partial struct GpaSpmSetDurationPtrType : IEquatable<GPUPerfAPI.GpaSpmSetDurationPtrType>
        {
            public GpaSpmSetDurationPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmSetDurationPtrType other && Equals(other);
            
            public bool Equals(GpaSpmSetDurationPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmSetDurationPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmSetDurationPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmSetDurationPtrType(from);
            
            public static bool operator ==(GpaSpmSetDurationPtrType left, GpaSpmSetDurationPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmSetDurationPtrType left, GpaSpmSetDurationPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmBegin
        /// </summary>
        public readonly partial struct GpaSpmBeginPtrType : IEquatable<GPUPerfAPI.GpaSpmBeginPtrType>
        {
            public GpaSpmBeginPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmBeginPtrType other && Equals(other);
            
            public bool Equals(GpaSpmBeginPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmBeginPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmBeginPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmBeginPtrType(from);
            
            public static bool operator ==(GpaSpmBeginPtrType left, GpaSpmBeginPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmBeginPtrType left, GpaSpmBeginPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmEnd
        /// </summary>
        public readonly partial struct GpaSpmEndPtrType : IEquatable<GPUPerfAPI.GpaSpmEndPtrType>
        {
            public GpaSpmEndPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmEndPtrType other && Equals(other);
            
            public bool Equals(GpaSpmEndPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmEndPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmEndPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmEndPtrType(from);
            
            public static bool operator ==(GpaSpmEndPtrType left, GpaSpmEndPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmEndPtrType left, GpaSpmEndPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmGetSampleResultSize
        /// </summary>
        public readonly partial struct GpaSpmGetSampleResultSizePtrType : IEquatable<GPUPerfAPI.GpaSpmGetSampleResultSizePtrType>
        {
            public GpaSpmGetSampleResultSizePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmGetSampleResultSizePtrType other && Equals(other);
            
            public bool Equals(GpaSpmGetSampleResultSizePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmGetSampleResultSizePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmGetSampleResultSizePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmGetSampleResultSizePtrType(from);
            
            public static bool operator ==(GpaSpmGetSampleResultSizePtrType left, GpaSpmGetSampleResultSizePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmGetSampleResultSizePtrType left, GpaSpmGetSampleResultSizePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmGetSampleResult
        /// </summary>
        public readonly partial struct GpaSpmGetSampleResultPtrType : IEquatable<GPUPerfAPI.GpaSpmGetSampleResultPtrType>
        {
            public GpaSpmGetSampleResultPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmGetSampleResultPtrType other && Equals(other);
            
            public bool Equals(GpaSpmGetSampleResultPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmGetSampleResultPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmGetSampleResultPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, nuint, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmGetSampleResultPtrType(from);
            
            public static bool operator ==(GpaSpmGetSampleResultPtrType left, GpaSpmGetSampleResultPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmGetSampleResultPtrType left, GpaSpmGetSampleResultPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaSpmCalculateDerivedCounters
        /// </summary>
        public readonly partial struct GpaSpmCalculateDerivedCountersPtrType : IEquatable<GPUPerfAPI.GpaSpmCalculateDerivedCountersPtrType>
        {
            public GpaSpmCalculateDerivedCountersPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSpmData*, uint, ulong*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSpmData*, uint, ulong*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaSpmCalculateDerivedCountersPtrType other && Equals(other);
            
            public bool Equals(GpaSpmCalculateDerivedCountersPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSpmData*, uint, ulong*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaSpmCalculateDerivedCountersPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaSpmCalculateDerivedCountersPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaSpmData*, uint, ulong*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaSpmCalculateDerivedCountersPtrType(from);
            
            public static bool operator ==(GpaSpmCalculateDerivedCountersPtrType left, GpaSpmCalculateDerivedCountersPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaSpmCalculateDerivedCountersPtrType left, GpaSpmCalculateDerivedCountersPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEnableCounter.
        /// </summary>
        public readonly partial struct GpaEnableCounterPtrType : IEquatable<GPUPerfAPI.GpaEnableCounterPtrType>
        {
            public GpaEnableCounterPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEnableCounterPtrType other && Equals(other);
            
            public bool Equals(GpaEnableCounterPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEnableCounterPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEnableCounterPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEnableCounterPtrType(from);
            
            public static bool operator ==(GpaEnableCounterPtrType left, GpaEnableCounterPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEnableCounterPtrType left, GpaEnableCounterPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaDisableCounter.
        /// </summary>
        public readonly partial struct GpaDisableCounterPtrType : IEquatable<GPUPerfAPI.GpaDisableCounterPtrType>
        {
            public GpaDisableCounterPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaDisableCounterPtrType other && Equals(other);
            
            public bool Equals(GpaDisableCounterPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaDisableCounterPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaDisableCounterPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaDisableCounterPtrType(from);
            
            public static bool operator ==(GpaDisableCounterPtrType left, GpaDisableCounterPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaDisableCounterPtrType left, GpaDisableCounterPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEnableCounterByName.
        /// </summary>
        public readonly partial struct GpaEnableCounterByNamePtrType : IEquatable<GPUPerfAPI.GpaEnableCounterByNamePtrType>
        {
            public GpaEnableCounterByNamePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEnableCounterByNamePtrType other && Equals(other);
            
            public bool Equals(GpaEnableCounterByNamePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEnableCounterByNamePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEnableCounterByNamePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEnableCounterByNamePtrType(from);
            
            public static bool operator ==(GpaEnableCounterByNamePtrType left, GpaEnableCounterByNamePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEnableCounterByNamePtrType left, GpaEnableCounterByNamePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaDisableCounterByName.
        /// </summary>
        public readonly partial struct GpaDisableCounterByNamePtrType : IEquatable<GPUPerfAPI.GpaDisableCounterByNamePtrType>
        {
            public GpaDisableCounterByNamePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaDisableCounterByNamePtrType other && Equals(other);
            
            public bool Equals(GpaDisableCounterByNamePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaDisableCounterByNamePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaDisableCounterByNamePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, byte*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaDisableCounterByNamePtrType(from);
            
            public static bool operator ==(GpaDisableCounterByNamePtrType left, GpaDisableCounterByNamePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaDisableCounterByNamePtrType left, GpaDisableCounterByNamePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEnableAllCounters.
        /// </summary>
        public readonly partial struct GpaEnableAllCountersPtrType : IEquatable<GPUPerfAPI.GpaEnableAllCountersPtrType>
        {
            public GpaEnableAllCountersPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEnableAllCountersPtrType other && Equals(other);
            
            public bool Equals(GpaEnableAllCountersPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEnableAllCountersPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEnableAllCountersPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEnableAllCountersPtrType(from);
            
            public static bool operator ==(GpaEnableAllCountersPtrType left, GpaEnableAllCountersPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEnableAllCountersPtrType left, GpaEnableAllCountersPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaDisableAllCounters.
        /// </summary>
        public readonly partial struct GpaDisableAllCountersPtrType : IEquatable<GPUPerfAPI.GpaDisableAllCountersPtrType>
        {
            public GpaDisableAllCountersPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaDisableAllCountersPtrType other && Equals(other);
            
            public bool Equals(GpaDisableAllCountersPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaDisableAllCountersPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaDisableAllCountersPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaDisableAllCountersPtrType(from);
            
            public static bool operator ==(GpaDisableAllCountersPtrType left, GpaDisableAllCountersPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaDisableAllCountersPtrType left, GpaDisableAllCountersPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetPassCount.
        /// </summary>
        public readonly partial struct GpaGetPassCountPtrType : IEquatable<GPUPerfAPI.GpaGetPassCountPtrType>
        {
            public GpaGetPassCountPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetPassCountPtrType other && Equals(other);
            
            public bool Equals(GpaGetPassCountPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetPassCountPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetPassCountPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetPassCountPtrType(from);
            
            public static bool operator ==(GpaGetPassCountPtrType left, GpaGetPassCountPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetPassCountPtrType left, GpaGetPassCountPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GetNumEnabledCounters.
        /// </summary>
        public readonly partial struct GpaGetNumEnabledCountersPtrType : IEquatable<GPUPerfAPI.GpaGetNumEnabledCountersPtrType>
        {
            public GpaGetNumEnabledCountersPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetNumEnabledCountersPtrType other && Equals(other);
            
            public bool Equals(GpaGetNumEnabledCountersPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetNumEnabledCountersPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetNumEnabledCountersPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetNumEnabledCountersPtrType(from);
            
            public static bool operator ==(GpaGetNumEnabledCountersPtrType left, GpaGetNumEnabledCountersPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetNumEnabledCountersPtrType left, GpaGetNumEnabledCountersPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetEnabledIndex.
        /// </summary>
        public readonly partial struct GpaGetEnabledIndexPtrType : IEquatable<GPUPerfAPI.GpaGetEnabledIndexPtrType>
        {
            public GpaGetEnabledIndexPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetEnabledIndexPtrType other && Equals(other);
            
            public bool Equals(GpaGetEnabledIndexPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetEnabledIndexPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetEnabledIndexPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetEnabledIndexPtrType(from);
            
            public static bool operator ==(GpaGetEnabledIndexPtrType left, GpaGetEnabledIndexPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetEnabledIndexPtrType left, GpaGetEnabledIndexPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaIsCounterEnabled.
        /// </summary>
        public readonly partial struct GpaIsCounterEnabledPtrType : IEquatable<GPUPerfAPI.GpaIsCounterEnabledPtrType>
        {
            public GpaIsCounterEnabledPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaIsCounterEnabledPtrType other && Equals(other);
            
            public bool Equals(GpaIsCounterEnabledPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaIsCounterEnabledPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaIsCounterEnabledPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaIsCounterEnabledPtrType(from);
            
            public static bool operator ==(GpaIsCounterEnabledPtrType left, GpaIsCounterEnabledPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaIsCounterEnabledPtrType left, GpaIsCounterEnabledPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaBeginCommandList.
        /// </summary>
        public readonly partial struct GpaBeginCommandListPtrType : IEquatable<GPUPerfAPI.GpaBeginCommandListPtrType>
        {
            public GpaBeginCommandListPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, void*, GPUPerfAPI.GpaCommandListType, GPUPerfAPI.GpaCommandListId*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, void*, GPUPerfAPI.GpaCommandListType, GPUPerfAPI.GpaCommandListId*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaBeginCommandListPtrType other && Equals(other);
            
            public bool Equals(GpaBeginCommandListPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, void*, GPUPerfAPI.GpaCommandListType, GPUPerfAPI.GpaCommandListId*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaBeginCommandListPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaBeginCommandListPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, void*, GPUPerfAPI.GpaCommandListType, GPUPerfAPI.GpaCommandListId*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaBeginCommandListPtrType(from);
            
            public static bool operator ==(GpaBeginCommandListPtrType left, GpaBeginCommandListPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaBeginCommandListPtrType left, GpaBeginCommandListPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEndCommandList.
        /// </summary>
        public readonly partial struct GpaEndCommandListPtrType : IEquatable<GPUPerfAPI.GpaEndCommandListPtrType>
        {
            public GpaEndCommandListPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEndCommandListPtrType other && Equals(other);
            
            public bool Equals(GpaEndCommandListPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEndCommandListPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEndCommandListPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEndCommandListPtrType(from);
            
            public static bool operator ==(GpaEndCommandListPtrType left, GpaEndCommandListPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEndCommandListPtrType left, GpaEndCommandListPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaBeginSample.
        /// </summary>
        public readonly partial struct GpaBeginSamplePtrType : IEquatable<GPUPerfAPI.GpaBeginSamplePtrType>
        {
            public GpaBeginSamplePtrType(delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaBeginSamplePtrType other && Equals(other);
            
            public bool Equals(GpaBeginSamplePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaBeginSamplePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaBeginSamplePtrType (delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaBeginSamplePtrType(from);
            
            public static bool operator ==(GpaBeginSamplePtrType left, GpaBeginSamplePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaBeginSamplePtrType left, GpaBeginSamplePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaEndSample.
        /// </summary>
        public readonly partial struct GpaEndSamplePtrType : IEquatable<GPUPerfAPI.GpaEndSamplePtrType>
        {
            public GpaEndSamplePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaEndSamplePtrType other && Equals(other);
            
            public bool Equals(GpaEndSamplePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaEndSamplePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaEndSamplePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaEndSamplePtrType(from);
            
            public static bool operator ==(GpaEndSamplePtrType left, GpaEndSamplePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaEndSamplePtrType left, GpaEndSamplePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaContinueSampleOnCommandList.
        /// </summary>
        public readonly partial struct GpaContinueSampleOnCommandListPtrType : IEquatable<GPUPerfAPI.GpaContinueSampleOnCommandListPtrType>
        {
            public GpaContinueSampleOnCommandListPtrType(delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaContinueSampleOnCommandListPtrType other && Equals(other);
            
            public bool Equals(GpaContinueSampleOnCommandListPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaContinueSampleOnCommandListPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaContinueSampleOnCommandListPtrType (delegate*unmanaged[Cdecl]<uint, GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaContinueSampleOnCommandListPtrType(from);
            
            public static bool operator ==(GpaContinueSampleOnCommandListPtrType left, GpaContinueSampleOnCommandListPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaContinueSampleOnCommandListPtrType left, GpaContinueSampleOnCommandListPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaCopySecondarySamples.
        /// </summary>
        public readonly partial struct GpaCopySecondarySamplesPtrType : IEquatable<GPUPerfAPI.GpaCopySecondarySamplesPtrType>
        {
            public GpaCopySecondarySamplesPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaCommandListId, uint, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaCommandListId, uint, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaCopySecondarySamplesPtrType other && Equals(other);
            
            public bool Equals(GpaCopySecondarySamplesPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaCommandListId, uint, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaCopySecondarySamplesPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaCopySecondarySamplesPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaCommandListId, GPUPerfAPI.GpaCommandListId, uint, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaCopySecondarySamplesPtrType(from);
            
            public static bool operator ==(GpaCopySecondarySamplesPtrType left, GpaCopySecondarySamplesPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaCopySecondarySamplesPtrType left, GpaCopySecondarySamplesPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetSampleCount.
        /// </summary>
        public readonly partial struct GpaGetSampleCountPtrType : IEquatable<GPUPerfAPI.GpaGetSampleCountPtrType>
        {
            public GpaGetSampleCountPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetSampleCountPtrType other && Equals(other);
            
            public bool Equals(GpaGetSampleCountPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetSampleCountPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetSampleCountPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetSampleCountPtrType(from);
            
            public static bool operator ==(GpaGetSampleCountPtrType left, GpaGetSampleCountPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetSampleCountPtrType left, GpaGetSampleCountPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaIsPassComplete.
        /// </summary>
        public readonly partial struct GpaIsPassCompletePtrType : IEquatable<GPUPerfAPI.GpaIsPassCompletePtrType>
        {
            public GpaIsPassCompletePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaIsPassCompletePtrType other && Equals(other);
            
            public bool Equals(GpaIsPassCompletePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaIsPassCompletePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaIsPassCompletePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaIsPassCompletePtrType(from);
            
            public static bool operator ==(GpaIsPassCompletePtrType left, GpaIsPassCompletePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaIsPassCompletePtrType left, GpaIsPassCompletePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaIsSessionComplete.
        /// </summary>
        public readonly partial struct GpaIsSessionCompletePtrType : IEquatable<GPUPerfAPI.GpaIsSessionCompletePtrType>
        {
            public GpaIsSessionCompletePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaIsSessionCompletePtrType other && Equals(other);
            
            public bool Equals(GpaIsSessionCompletePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaIsSessionCompletePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaIsSessionCompletePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaIsSessionCompletePtrType(from);
            
            public static bool operator ==(GpaIsSessionCompletePtrType left, GpaIsSessionCompletePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaIsSessionCompletePtrType left, GpaIsSessionCompletePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetSampleResultSize.
        /// </summary>
        public readonly partial struct GpaGetSampleResultSizePtrType : IEquatable<GPUPerfAPI.GpaGetSampleResultSizePtrType>
        {
            public GpaGetSampleResultSizePtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetSampleResultSizePtrType other && Equals(other);
            
            public bool Equals(GpaGetSampleResultSizePtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetSampleResultSizePtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetSampleResultSizePtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetSampleResultSizePtrType(from);
            
            public static bool operator ==(GpaGetSampleResultSizePtrType left, GpaGetSampleResultSizePtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetSampleResultSizePtrType left, GpaGetSampleResultSizePtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetSampleResult.
        /// </summary>
        public readonly partial struct GpaGetSampleResultPtrType : IEquatable<GPUPerfAPI.GpaGetSampleResultPtrType>
        {
            public GpaGetSampleResultPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint, void*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint, void*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetSampleResultPtrType other && Equals(other);
            
            public bool Equals(GpaGetSampleResultPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint, void*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetSampleResultPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetSampleResultPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, nuint, void*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetSampleResultPtrType(from);
            
            public static bool operator ==(GpaGetSampleResultPtrType left, GpaGetSampleResultPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetSampleResultPtrType left, GpaGetSampleResultPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetStatusAsStr.
        /// </summary>
        public readonly partial struct GpaGetStatusAsStrPtrType : IEquatable<GPUPerfAPI.GpaGetStatusAsStrPtrType>
        {
            public GpaGetStatusAsStrPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus, byte*> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus, byte*> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetStatusAsStrPtrType other && Equals(other);
            
            public bool Equals(GpaGetStatusAsStrPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus, byte*> (GPUPerfAPI.GpaGetStatusAsStrPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetStatusAsStrPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaStatus, byte*> from) => new GPUPerfAPI.GpaGetStatusAsStrPtrType(from);
            
            public static bool operator ==(GpaGetStatusAsStrPtrType left, GpaGetStatusAsStrPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetStatusAsStrPtrType left, GpaGetStatusAsStrPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetSampleId.
        /// </summary>
        public readonly partial struct GpaGetSampleIdPtrType : IEquatable<GPUPerfAPI.GpaGetSampleIdPtrType>
        {
            public GpaGetSampleIdPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetSampleIdPtrType other && Equals(other);
            
            public bool Equals(GpaGetSampleIdPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetSampleIdPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetSampleIdPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaSessionId, uint, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetSampleIdPtrType(from);
            
            public static bool operator ==(GpaGetSampleIdPtrType left, GpaGetSampleIdPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetSampleIdPtrType left, GpaGetSampleIdPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetVersion.
        /// </summary>
        public readonly partial struct GpaGetVersionPtrType : IEquatable<GPUPerfAPI.GpaGetVersionPtrType>
        {
            public GpaGetVersionPtrType(delegate*unmanaged[Cdecl]<uint*, uint*, uint*, uint*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<uint*, uint*, uint*, uint*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetVersionPtrType other && Equals(other);
            
            public bool Equals(GpaGetVersionPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<uint*, uint*, uint*, uint*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetVersionPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetVersionPtrType (delegate*unmanaged[Cdecl]<uint*, uint*, uint*, uint*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetVersionPtrType(from);
            
            public static bool operator ==(GpaGetVersionPtrType left, GpaGetVersionPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetVersionPtrType left, GpaGetVersionPtrType right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef for a function pointer for GpaGetDeviceGeneration.
        /// </summary>
        public readonly partial struct GpaGetDeviceGenerationPtrType : IEquatable<GPUPerfAPI.GpaGetDeviceGenerationPtrType>
        {
            public GpaGetDeviceGenerationPtrType(delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaHwGeneration*, GPUPerfAPI.GpaStatus> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaHwGeneration*, GPUPerfAPI.GpaStatus> Value { get; }
            
            public override bool Equals(object obj) => obj is GpaGetDeviceGenerationPtrType other && Equals(other);
            
            public bool Equals(GpaGetDeviceGenerationPtrType other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaHwGeneration*, GPUPerfAPI.GpaStatus> (GPUPerfAPI.GpaGetDeviceGenerationPtrType from) => from.Value;
            
            public static implicit operator GPUPerfAPI.GpaGetDeviceGenerationPtrType (delegate*unmanaged[Cdecl]<GPUPerfAPI.GpaContextId, GPUPerfAPI.GpaHwGeneration*, GPUPerfAPI.GpaStatus> from) => new GPUPerfAPI.GpaGetDeviceGenerationPtrType(from);
            
            public static bool operator ==(GpaGetDeviceGenerationPtrType left, GpaGetDeviceGenerationPtrType right) => left.Equals(right);
            
            public static bool operator !=(GpaGetDeviceGenerationPtrType left, GpaGetDeviceGenerationPtrType right) => !left.Equals(right);
        }
    }
}
